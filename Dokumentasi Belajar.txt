***Destructuring Object and Array in ES6
__________________________________________________________________________________________
menggunakan literals {} untuk objek dan square brackets [] untuk array.
contoh penggunaan:

__ARRAY__
* native
const arr = ["Hasbi", "Tegal", ["Java", "python"]];

const name = arr[0];
const address = arr[1];
const skill = arr[2];

console.log(name);
console.log(address);
console.log(skill);

*ES6
const arr = ["Hasbi", "Tegal", ["Java", "python"]];

const [name, address, skill] = arr;
console.log(name);
console.log(address);
console.log(skill);

__OBJECT__

const obj = {
name: "Hasbi",
address: "Tegal",
skill: ["Java", "python"]
}

*native 
const name = obj.name;
const address = obj.address;
const skill = obj.skill;

*ES6

const {name, address, skill} = obj

console.log(name);
console.log(address);
console.log(skill);
________________________________________________________________________

***Spreading Operator and Rest Parameter
__________________________________________________________________________________________
Spreading operator dituliskan dengan tiga titik konsekutif (...).  
Digunakan untuk membentangkan nilai array atau lebih tepatnya iterable object 
menjadi beberapa elements. Mari kita lihat contoh kode berikut:

const fav = ["salad", "soup", "nugget"];

*native
console.log(fav)

return -> [ 'Seafood', 'Salad', 'Nugget']

*Spread Operator (...)

console.log(...fav)

return -> Seafood Salad Nugget
----
sehingga penggunaan spread operator sama dengan 
console.log(fav[0], fav[3], fav[2])


Pada penerapan lain

const num = [12, 32, 90]

console.log(Math.max(...num));

return -> 90

dapat menggabungkan dua buah array pada arary baru
contoh: 

const fav = ["salad", "soup", "nugget"];
const other = ["cake", "cakue", "tahu"];
//menggabungkan 2a
const arrayMerge  = [...fav, ...other];

return -> ["salad", "soup", "nugget", "cake", "cakue", "tahu"];
______________________________________________________________________

***REST PARAMETER
__________________________________________________________________________________________
menggunakan simbol yang sama dengan spread operator yaitu titik tiga (...)

digunakan pada variadic function yang melakukan operasi matematika dengan memasukkan
banyak nilai parameter

contoh: 

const sum = (...numbers) => {
	let result = 0;
	for(let number of numbers) {
		result += number
	}
	return result
}

console.log(sum(1,2,3,4,5))

return -> 15
--------------
Rest parameter dapat digunakan untuk mengelompokkan item pada destructuring array
contoh:

const kulkas = ["sharp", 30, 1, "daging", "sayur"]

const [merek, berat, pintu, ...isi];

console.log(merek)
console.log(berat)
console.log(pintu)
console.log(isi)

return -> 
sharp
30
1
['daging','sayur']
____________________________________________________________________________________

***THIS KEYWORD
__________________________________________________________________________________________
Pada objek, this mengembalikan nilai objeknya sendiri. jika function dipanggil tanpa
menggunakan keyword new maka this akan memiliki scope global.

____________________________________________________________________________________
***CLASS
__________________________________________________________________________________________
penulisan class pada ES6

class car {
	constructor(manufacture, color) {
		this.manufacture = manufacture;
		this.color = color;
		this.engineActive = false
	}

	method1() {
		//code here
	}

	method2(params1) {
		//code here
	}
}
-----------------------
class Car {
    constructor(manufacture, color) {
        this.manufacture = manufacture;
        this.color = color;
        this.enginesActive = false;
    }
    
    startEngines() {
        console.log("Mesin dinyalakan");
        this.enginesActive = true;
    }
    
    info() {
        console.log(`Manufacture: ${this.manufacture}`);
        console.log(`Color: ${this.color}`);
        console.log(`Engines: ${this.manufacture ? "Active" : "Inactive"}`);
    }
}
 
const johnCar = new Car("Honda", "Red");

johnCar.startEngines();
johnCar.info();
 
 
/* output:
Mesin dinyalakan
Manufacture: Honda
Color: Red
Engines: Active
*/
_____________________________________________________________________________________

***INHERITANCE
__________________________________________________________________________________________
//ParentClass


class Vehicle {
    constructor(licensePlate, manufacture) {
        this.licensePlate = licensePlate;
        this.manufacture = manufacture;
        this.engineActive = false;
    }
    
    startEngines() {
        console.log(`Mesin kendaraan ${this.licensePlate} dinyalakan!`);
    }
    
    info() {
        console.log(`Nomor Kendaraan: ${this.licensePlate}`);
        console.log(`Manufacture: ${this.manufacture}`);
        console.log(`Mesin: ${this.engineActive ? "Active": "Inactive"}`);
    }
    
    parking() {
        console.log(`Kendaraan ${this.licensePlate} parkir!`);
    }
}

class Car extends Vehicle {
   constructor(licensePlate, manufacture, wheels) {
       super(licensePlate, manufacture);
       this.wheels = wheels;
   }
 
   droveOff() {
     console.log(`Kendaraan ${this.licensePlate} melaju!`);
   }
 
   openDoor() {
     console.log(`Membuka pintu!`);
   }

//Overriding method info() dari ParentClass
	info() {
		super.info();
		console.log(`Jumlah roda: ${this.wheels}`);
	}
}

_____________________________________________________________________________________

***PROMISE
__________________________________________________________________________________________
Dalam synchronous program, jika kita menuliskan dua baris kode maka baris kode yang 
kedua tidak bisa dieksekusi sebelum mengeksekusi kode pada baris pertama. 

Dalam asynchronous program, jika kita menuliskan dua baris kode, kita dapat membuat 
baris kode kedua dieksekusi tanpa harus menunggu kode pada baris pertama selesai 
dieksekusi. 

Dalam program yang dijalankan secara asynchronous task yang kecil akan lebih dahulu 
selesai dibandingkan dengan task yang besar, meskipun task yang besar lebih dahulu 
dijalankan.

* SetTimeout

Fungsi ini menerima dua buah parameter. Pertama adalah fungsi yang akan dijalankan 
secara asynchronous, dan kedua adalah nilai number dalam milisecond sebagai nilai 
tunggu sebelum fungsi dijalankan. Contoh penggunaannya adalah seperti ini:

contoh:

console.log("Selamat datang!");

setTimeout(() => {
	console.log("Terimakasih sudah mampir, silakan datang kembali!")
}, 3000)
console.log("Ada yang bisa dibantu?")


* Callback Function pada asynchronous

Bagaimana cara melakukannya? Yang pertama kita tambahkan parameter dengan nama 
callback pada fungsi asynchronous.

const getCake = callback => {
	let cake = null;
	console.log("Sedang membuat kue, silakan tunggu...")
	
	setTimeout(() => {
		cake = "Kue Selesai"
	}, 3000);
	return cake;
}

-------------------penerapan callback-------------------

const getCake = callback => {
	let cake = null;
	console.log("Sedang membuat kue, silakan tunggu...")
	
	setTimeout(() => {
		cake = "Kue Selesai";
		//panggil parameter callback dan masukan data yang akan dibawa
		callback(cake);
	}, 3000);
	
}

//ganti
const cake = getCake();
console.log(cake);

//dengan
getCake(cake => {
	console.log(cake);
});


/* output:
Sedang membuat kue, silakan tunggu ....
---- setelah 3 detik ----
Kue Selesai!
*/


* Callback Hell

Callback sangat dibutuhkan untuk mendapatkan nilai dari asynchronous function.
Lantas bagaimana jika terdapat proses satu sama lain yang saling bergantungan?
Contoh, untuk membuat kue tahapan yang perlu kita lakukan adalah:

1. Mempersiapkan bahan
2. Membuat adonan
3. Menyiapkan adonan ke cetakan
4. Memanggang adonan 

contoh callback hell: 
*synchronous
function makeACake(...rawIngredients) {
	const ingredients = gatheringIngredients(rawIngredients),
	dough = makeTheDough(ingredients),
	pouredDough = pourDough(dough),
	cake = bakeACake(pourDough),
	console.log(cake);
}

*asynchronous
function makeACake(...rawIngredients) {
	gatheringIngredients(rawIngredients, function(ingridients) {
		makeTheDough(ingridients, function(dough) {
			pourDough(dough, function(pouredDough) {
				bakeACake(pouredDough, function(cake) {
					console.log(cake);
				});
			});
		});
	});
}

Untuk menghindari Callback hell yaitu dengan menggunakan promise.
Contoh: 

function makeACake(...rawIngredients) {
	gatheringIngredients(rawIngredients)
	.then(makeTheDough)
	.then(pourDough)
	.then(bakeACake)
	.then(console.log);
}
__________________________________________________________________________________________
***PROMISE
__________________________________________________________________________________________

Memiliki 3 kondisi perilaku, seperti: 
1. pending (janji sedang dalam proses)
2. fulfilled (janji terpenuhi)
3. Rejected (janji gagal terpenuhi)

__Constructuring a promise object

const coffee = new Promise();

diperlukan resolver atau bisa disebut executor function sebagai parameter callback yang akan
diekseskusi secara otomatis

contoh: 

const exeFunc = (res, rej) => {
  const coffee = true;
  if(coffee) {
    res("success")
  }
    rej("Failed")
}

const makeCoffee = new Promise(exeFunc);

console.log(makeCoffee)

__Return -> /* output:
Promise { 'Success' }
*/


Executor function dapat memiliki dua parameter, yang berfungsi sebagai resolve() dan reject() 
function. Berikut penjelasan detailnya:

1. resolve() merupakan parameter pertama pada executor function. Parameter ini merupakan fungsi 
yang dapat menerima satu parameter, biasanya kita gunakan untuk mengirimkan data ketika promise 
berhasil dilakukan. Ketika fungsi ini terpanggil, kondisi Promise akan berubah dari pending 
menjadi fulfilled.

2. reject() merupakan parameter kedua pada executor function. Parameter ini merupakan fungsi yang 
dapat menerima satu parameter yang digunakan untuk memberikan alasan mengapa Promise tidak dapat 
terpenuhi. Ketika fungsi ini terpanggil, kondisi Promise akan berubah dari pending menjadi rejected.
__________________________________________________________________________________________

**onFulfilled and onRejected Functions

Untuk menangani nilai yang dikirimkan oleh resolve() ketika Promise onFulfilled, kita gunakan method 
.then() pada objek promise yang kita buat. Lalu di dalam method .then() kita berikan parameter berupa 
function yang berguna sebagai handle callback. Contohnya seperti ini:

const exeFunc = (res, rej) => {
  const coffee = true;
  if(coffee) {
    res("success")
  }
    rej("Failed")
}

//deklarasikan function handler dari resolve value yang mencetak nilai dari parameternya

const handlerSuccess =  (resolveValue) => {
  console.log(resolveValue);
}

//buat objek promis dan ambil nilai dari function exefunc

const makeCoffee = new Promise(exeFunc);

//ketika exefunc menghasilkan nilai resolve maka handler membawa nilai resolve()

makeCoffee.then(handlerSuccess);


PEEMBAHASAN KODE
Mari kita bedah kode yang ada di atas:

1. makeCoffee merupakan objek promise yang akan menghasilkan resolve() dengan membawa nilai �Kopi berhasil dibuat�.
2. Lalu kita mendeklarasikan fungsi handlerSuccess() yang mencetak nilai dari parameternya.
3. Kemudian kita memanggil method .then() dari makeCoffee dan memberikan handlerSuccess sebagai parameternya.
4. Ketika makeCoffee terpenuhi (fulfilled), maka handlerSuccess() akan terpanggil dengan parameter nilai yang 
dibawa oleh resolve(). Sehingga output akan menghasilkan �Kopi berhasil dibuat�.

**Note, bagaimana jika respon yang diberikan reject()?
kita dapat menyimpan dua handle callback yaitu onFulfilled atau onRejected dalam parameter method .then().
contoh: 

makeCoffee.then(handlerSuccess, handlerRejected); 

*Kode lengkap

const exeFunc = (res, rej) => {
  const coffee = false;
  if(coffee) {
    res("success")
  }
    rej("Failed")
}

const handlerSuccess =  (resolveValue) => {
  console.log(resolveValue);
}

const handlerFailed = (rejectValue) => {
  console.log(rejectValue);
}

const makeCoffee = new Promise(exeFunc);

makeCoffee.then(handlerSuccess, handlerFailed);

______________________________________________________________________
OnReject with catch

parameter dalam .then dapat dipisahkan seperti

const makeCoffee = new Promise(exeFunc);
makeCoffee
	.then(handlerSuccess)
	.then(null, handlerFailed)

tetapi dalam handler failed kita perlu menuliskan null, hal ini mungkin sedikit merepotkan

untuk menerapkan separate of concern kita dapat menggunakan .catch() untuk handler reject
untuk memisahkan kedua logika tersebut yaitu resolve dan reject.
seperti: 

makeCoffee
	.then(handlerSuccess)
	.catch(handlerFailed)

______________________________________________________________________________________________
***CHAINING PROMISE

untuk menghindari callbak hell atau dalam kasus keadaan asynchronous operation saling bergantungan
kita dapat menggunakan promise.

dalam studi kasus Contohnya, Ketika kita memesan kopi robusta, maka tahapan yang dilalui oleh 
barista adalah memastikan biji kopi tersedia, membuat kopi, lalu menghidangkannya kepada pelanggan.
Tahapan tersebut harus barista lakukan secara berurutan.

contoh kode: 

//STATE
const state = {
  iscoffeeMakerReady: true,
  seedStocks: {
    arabica: 250,
    robusta: 60,
    liberica: 80
  }
}

//*Kode function seeds:

const getSeeds = (type, miligrams) => {
  return new Promise((resolve, reject) ={
      if(state.seedStocks[type] >= miligrams){
        state.seedStocks[type] -= miligrams;
        resolve("Biji kopi berhasi didapatkan");
      } else {
        reject("Stok Habis");
      }
  });
}

const makeCoffee = seeds => {
  return new Promise((resolve, reject) => {
    if(state.isCoffeeMakerReady) {
      resolve("kopi berhasil dibuat");
    } else {
      reject("maaf mesin tidak dapat digunakan");
    }
  });
}

const servingToTable = coffee => {
  return new Promise(resolve => {
    resolve("Pesanan kopi sudah selesai");
  });
}

const reserveACoffee = (type, miligrams) => {
  getSeeds(type, miligrams)
  .then(makeCoffee)
  .then(servingToTable)
  .then(resolvedValue => {
    console.log(resolvedValue);
  })
  
  .catch(rejectedReason => {
    console.log(rejectedReason);
  })
}

reserveACoffee("robusta", 80);

/* output:
Pesanan kopi sudah selesai!
*/

----------------
penjelasan kode diatas

kita memsan kopi melalui method reserveAcoffee(), dengan mengambil dua parameter yaitu type (tipe kopi) dan miligrams (banyak kopi) kemudian dikirimkan pada method getSeeds dimana method ini mengembalikan nilai promise resolve dan reject.
selanjutnya nilai resolve akan dikirimkan pada .then(makeCoffee). Method makeCoffee
mengembalikan nilai resolve apakah mesin siap digunakan?. setelah kopi sudah dibuat maka dikirimkan ke .then(servingToTable) dan terakhir kita gunakan .then(resolveValue) untuk mencetak nilai yang dikembalikan oleh method servingToTable.
Kemudian yang paling akhir adalah method catch() untuk menangani promise rejection.
______________________________________________________________________

**PROMISE ALL
Promise.all()

Dapat menerima banyak promise (dalam bentuk array) pada parameternya. mengembalikan nilai dari seluruh promise yang kita tetapkan dalam bentuk array.

//Contoh kode

// membuat method Promise
const arabicaOrder = () => {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve("Kopi Arabica Selesai!");
    }, 4000)
  });
}

const luwakOrder = () => {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve("Kopi Luwak Selesai!")
    }, 2000);
  });
}

const robustOrder = () => {
  return new Promise(resolve => {
    setTimeout(() => {
      resolve("Kopi Robusta Selesai!")
    }, 3000)
  });
}

// memasukkan Promise dalam array

const promisesObj = [arabicaOrder(), luwakOrder(), robustOrder()];

// menggunakan Promise.all() untuk mendapatkan nilai respon resolve dari seluruh promise

Promise.all(promisesObj).then(resolveValue => {
  console.log(resolveValue);
})

/* output:
[ 
  'Kopi Arabica Selesai!',
  'Kopi Luwak Selesai!',
  'Kopi Robusta Selesai!'
]
 */

 nilai yang dikembalikan urutannya sesuai dengan array yang kita deklarasikan

 _____________________________________________________________________________

 **ASYNC-AWAIT Syntax

 mendapatkan nilai dari promise kita dapat menggunakan
--------------
 const makeCoffee = () => {
   getCoffee().then(coffee => {
     console.log(coffee);
   });
 }

 makeCoffee();
---------------
 Pada rilis ES8 (Ecmascript 2017) kita dapat menuliskan asynchronous process seperti synchronous proses menggunakan keyword async dan await.

*Using async dan await

komparasi:
* Promise

const getCoffee = () => {
  return new Promise((resolve, reject) => {
    const seeds = 100;
    setTimeout(() => {
      if(seeds >= 10){
        resolve("Kopi didapatkan")
      } else {
        reject("Biji kopi habis")
      }
    }, 1000);
  });
}

function makeCoffee() {
 getCoffee()
 .then(coffee => {
   console.log(coffee)
 })
}
 
makeCoffee();
 
/* output
Coffee didapatkan!
*/

*async dan await

async function makeCoffee() {
 const coffee = await getCoffee();
 console.log(coffee);
}
 
makeCoffee();
 
/* output
Coffee didapatkan!
*/


_______________________________________________________________________________

* Bagaimana cara menghandle onRejected dengan async/await

note: await hanya akan mengembalikan nilai jika promise berhasil (onFulfilled).
Jadi bagaiman jika promise gagal dilakukan (onRejected)?

Dalam konsep synchronous code, kita dapat menangani error dengan try and catch.

tempatkan resolve value dalam try, seperti ini:

async function makeCoffee() {
  try{
    const coffee = await getCoffee();
    console.log(coffee);
  }
}

kemudian kita dapat menggunakan block catch untuk menangani jika promise gagal dilakukan (onRejected).

async function makeCoffee() {
  try{
    const coffee = await getCoffee();
    console.log(coffee);
  } catch(rejectedReason) {
    console.log(rejectedReason);
  }
}

makeCoffee();


/* output
Biji kopi habis!
*/

________________________________________________________________________________

** Chaining Promise using async/await

Bagaimana cara menangani promise berantain menggunakan async/await.

*KOMPARASI
__Promise

function reserveACoffee(type, miligrams){
  getSeeds(type, miligrams)
  .then(makeCoffee)
  .then(servingToTable)
  .then(resolvedValue => {
    console.log(resolvedValue);
  })
  .catch(rejectedReason => {
    console.log(rejectedReason);
  })
}

reserveACoffee("liberica", 80);
 
/* output:
Pesanan kopi sudah selesai!
*/

__async/await

async function reserveACoffee(type, miligrams) {
  try {
    const seeds = await getSeeds(type, miligrams);
    const coffee = await makeCoffee(seeds);
    const result = await servingToTable(coffee);
    console.log(result);
  } catch(rejectedReason) {
    console.log(rejectedReason);
  }
}

reserveACoffee("liberica", 80);

/* output:
Pesanan kopi sudah selesai!
*/


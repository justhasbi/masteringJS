** Node.js Export and Import Modules

module bekerja dengan cara exporting atau importing nilai baik variable, method, array, objek, array ataupun class.

Contoh:

const coffeeStock = {
    arabica: 100,
    robusta: 120,
    liberica: 90,
    luwak: 150
};

module.exports = coffeeStock;

jika kita console.log(module)

maka kita akan mendapatkan objek coffeeStock menjadi nilai dari properti expert seperti dibawah ini:

Module {
  id: '.',
  exports: { arabica: 100, robusta: 150, liberica: 200 },
  parent: null,
  filename: '/home/runner/163-02-export-import/state.js',
  loaded: false,
  children: [],
  paths:
   [ '/home/runner/163-02-export-import/node_modules',
     '/home/runner/node_modules',
     '/home/node_modules',
     '/node_modules' ] 
}

*Untuk melakukan import caranya dengan menggunakan method require()
-----
const coffeeStock = require('./state.js');

console.log(coffeeStock);
---->
kemudian kita dapat menggunakannya sesuai keinginan kita

<----
const makeCoffe = (type, miligrams) => {
    if(coffeeStock[type] >= miligrams) {
        console.log('Kopi Berhasil Dibuat');
    } else {
        console.log('Biji Kopi Habis')
    }
}

makeCoffe('luwak', 80);

***Note:
“Tips dalam memberikan lokasi pada method require(): Jika kita gunakan lokasi yang relatif (dapat berubah/dipindahkan), pastikan awali dengan menuliskan ./. Contohnya, berkas index.js dan state.js berada pada folder yang sama, maka kita cukup menuliskannya dengan ./state.js.”

______________________________________________________________________________

**Multiple export value in Node.js

Kita dapat memanfaatkan objek literals {} untuk mengeksport lebih dari satu nilai.
contoh:

const coffeeStock = {
    arabica: 100,
    robusta: 120,
    liberica: 90,
    luwak: 150
};
//kita akan menambahkan isCoffeeMakerReady
const isCoffeeMakerReady = true

module.exports = {coffeeStock, isCoffeeMakerReady};

ketika import:

const {coffeeStock, isCoffeeMakerReady} = require('./state.js);
console.log(coffeeStock);
console.log(isCoffeeMakerReady);

/* output
{ arabica: 100, robusta: 150, liberica: 200 }
true
*/

______________________________________________________________________________
**Exporting and importing single value (Default Export)

pada ES6 jika kita hanya mengeksport satu nilai, kita gunakan export Default. contoh:

const coffeeStock = {
    arabica: 100,
    robusta: 120,
    liberica: 90,
    luwak: 150
};

export default coffeeStock;

untuk mengimportnya kita menggunakan import ... from ...

contoh:

// variable stock boleh bebas
import stock from "./state.js"

** Exporting and importing Multiple value (named export/import)

contoh:
const coffeeStock = {
    arabica: 100,
    robusta: 120,
    liberica: 90,
    luwak: 150
};
const isCoffeeMakerReady = true;
//menggunakan literals
export { coffeeStock, isCoffeeMakerReady};

// import
import{ coffeeStock, isCoffeeMakerReady} from "./state.js";

______________________________________________________________________________
My english is sucks, sorry :(.
______________________________________________________________________________

*** WEB COMPONENT
what is web component?

The web component is one of features who set by the World Wide Web Consortium Standard. This features make it easier for developer to make their website ui component more modular.

why should we use standard web components?

* Standard: The web components is a standard set by W3C in making reusable web components.

* Compatibility: because web components is standard, they can use be use in framework like angular, react, or vue.

* Simple: using web component doesn't special configuration like existing framework. Because web components are built using nothing but pure js/html/css.

There are two API's in implementing web component, that is:

* Custom Elements: used to make a new Elements (Custom Elements). we also can determine their behaviorrs as needed.

* Shadow DOM: Used to create encapsulated HTML elements from outside interference.
ussualy used on Custom Elements, so that these elements affected by styling that is set from outside elements.

-------Practice Write a Custom Elements-------

Dalam membuat custom element, kita akan menerapkannya pada javascript class dengan mewarisi sifat dari HTMLElement. HTMLElement sendiri merupakan API yang merepresentasikan elemen HTML.

contoh penulisannya:
-- 
class imgFigure extends HTMLElement {

}

untuk menggunakan custom elemen kita perlu menetapkan nama tag yang akan kita gunakan pada HTML, caranya dengan menggunakan variable customElements.

customElements.define("image-figure", imgFigure);

penjelasan -> customElements merupakan variable global yang digunakan untuk mendefinisikan custom elements. Di dalam customElements terdapat method define() yang menerima dua parameter, yaitu parameter pertama untuk meletakan TAG NAME baru kemudian diikuti javascript class yang menerapkan sifat HTMLElement.

**NOTE: dalam penulisan nama custom elements -> nama tag harus terdiri dari dua kata dan dipisahkan dengan dash (-) hal ini diperlukan untuk memberitahu browser perbedaan antara elemen asli dengan custom.

setelah didefinisikan kita dapat menggunakan custom elements tersebut.

<image-figure></image-figure>
//lampirkan juga script pada berkas yang digunakan untuk menuliskan customElements.

<script src="image-figure.js"></script>
______________________________________________________________________________

***Custom Elements Life Cycle

setiap class yang mewarisi HTMLElement maka akan memiliki siklus hidup yang sama dengan elemen html lainnya, kita dapat menerapkan logika pada setiap life Cycle dengan memanfaatkan lifecycle callbacks, seperti:

1. connectedCallback() -> dipanggil ketika elemen ditambahkan ke dokumen HTML (DOM).

2. disconnectedCallback() -> dipanggil ketika elemen diremove dari DOM

3. attributeChangedCallback() : Akan terpanggil setiap kali nilai atribut yang di-observe melalui fungsi static get observedAttributes diubah. Callback ini bisa kita manfaatkan untuk memuat ulang data yang ditampilkan oleh elemen.

4. adoptedCallback() : Akan terpanggil setiap kali elemen dipindahkan pada dokumen baru. Kita relatif jarang menggunakan callback ini, namun jika kita memanfaatkan tag <iframe> maka callback ini akan terpanggil.

**untuk melihat contoh buka folder course/lifecyle-custom-elem

______________________________________________________________________________

*** Custom Elements Attribute and method

Selain mewarisi lifecycle, clas yang mewarisi sifat HTMLElement dapata memiliki properti dan method yang sama dengan DOM seperti innerHTML, innerText, appendChild, remove().

**untuk melihat contoh buka folder course/lifecyle-custom-elem

______________________________________________________________________________

*** Observe Attribute Value

Ketika kita mengubah nilai atribut pada custom elemen maka hasilnya tidak berubah secara realtime karena custom elemen perlu mengimplementasikan dua function pada kelasnya (ImageFigure) agar dapat mengobservasi nilai atribut yang berubah. Function tersebut adalah attributeChangedCallback dan function static get observedAttributes.

fungsi attributeChangedCallback akan terpanggil ketika nilai array yang diamati pada function **static get observedAttributes** diubah nilainya.

pada function attributeChangedCallback terdapat 3 argumen untuk menerapkan logika perubahan, yaitu:

1. name: nama atribut yang berubah.
2. oldValue: nilai pada atribut sebelum diubah, dan
3. newValue: nilai pada atribut setelah diubah.

**penempatan argumen sangatlah penting jadi perhatikan!

contoh implementasinya dapat dilihat pada folder course/lifecyle-custom-elem

______________________________________________________________________________

*** Styling Custom Element without Shadow DOM

Tidak ada cara khusus dalam menetapkan styling pada custom elemen jika tidak menerapkan Shadow DOM. Kita dapat menerapkannya melalui css ataupun mengunakan javascript.

Pada custom element biasanya kita menuliskan styling dengan menggunakan tag <style> pada saat merender template HTML menggunakan innerHTML.

contoh:
-----
class ImageFigure extends HTMLElement {
 
......
 
 render() {
    this.innerHTML = `
      <style>
        figure {
          border: thin #c0c0c0 solid;
          display: flex;
          flex-flow: column;
          padding: 5px;
          max-width: 220px;
          margin: auto;
        }
 
        figure > img {
          max-width: 220px;
        }
 
        figure > figcaption {
          background-color: #222;
          color: #fff;
          font: italic smaller sans-serif;
          padding: 3px;
          text-align: center;
        }
      </style>
 
      <figure>
        <img src="${this.src}"
            alt="${this.alt}">
        <figcaption>${this.caption}</figcaption>
      </figure>
    `;
 }
 
......
}
 
customElements.define("image-figure", ImageFigure);
-----
Ataupun menerapkan style pada berkas css

/* Berkas style.css */
figure {
   border: thin #c0c0c0 solid;
   display: flex;
   flex-flow: column;
   padding: 5px;
   max-width: 220px;
   margin: auto;
}
 
figure > img {
   max-width: 220px;
}
 
figure > figcaption {
   background-color: #222;
   color: #fff;
   font: italic smaller sans-serif;
   padding: 3px;
   text-align: center;
}

______________________________________________________________________________

*** How to Handling Complex Data Using Custom Elements?

Pembuatan custom element ini membutuhkan javascript class, kemudian simpan properti tersebut dalam class dengan menggunakan properti accessor atau getter/setter.

contoh:

** file article.js

const article = {
 id: 1,
 title: "Lorem Ipsum Dolor",
 featuredImage: "https://picsum.photos/id/204/536/354?grayscale",
 description: "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."
}
 
export default article;

** file article-item.js
// membuat custom element

class ArticleItem extends HTMLElement {
// buat setter untuk menetapkan content article
    set article(article) {
        // membuat variable article menjadi private, jadi hanya bisa diakses melalui setter
        this._article = article;
        this.render()
    }

    render() {
        // render DOM pada HTML
        this.innerHTML = `
            <img class="featured-image" src="${this._article.featuredImage}">
            <div class="article-info">
                <h2><a href="${this._article.id}">${this._article.title}</a></h2>
                <p>${this._article.description}</p>
            </div>
        `;
    }
}
// mendefinisikan custom element
customElements.define("article-item", ArticleItem);

** File script.js

import "./article-item.js";
import article from "./article.js";

// mengambil selector dari div.container

const containerElement = document.querySelector(".container");

// membuat element article

const articleItemElement = document.createElement("article-item");

// .article disini merupakan setter dari class ArticleItem
// kemudian mengisikan datanya dengan objek article pada article.js
 
articleItemElement.article = article;

// menerapkan createElement pada child dari .container


containerElement.appendChild(articleItemElement);

** file index.html

<!DOCTYPE html>
<html>
 <head>
   <meta charset="utf-8">
   <meta name="viewport" content="width=device-width">
   <title>Handling Complex Data</title>
   <link href="style.css" rel="stylesheet" type="text/css" />
 </head>
 <body>
   <div class="container">
   </div>
   <script src="script.js" type="module"></script>
 </body>
</html>

** NOTE: Baca comment code tersebut untuk penjelasannya.

______________________________________________________________________________

*** NESTED CUSTOM ELEMENT

Web component dapat memudahkan dalam mengorganisir daftar item yang ditampilkan dalam bentuk list menggunakan container. Caranya kita membuat dua custom element yatu container, dan itemnya. Container digunakan untuk menampung elemen item di dalamnya. Selain itu pada container juga data (array) diberikan.

untuk contoh lihat folder nested-custom-elements

** note: Jika terdapat button atau element yang membutuhkan event maka harus didedifinisikan setter untuk event tersebut juga di dalam custom element contoh: 

set clickEvent(event) {
  this._clickEvent = event;
  render();
}

** dalam kode html 
<div id="search-container" class="search-container">
   <input placeholder="Search football club" id="searchElement" type="search">
    <button id="searchButtonElement" type="submit">Search</button>
</div>

kemudian untuk mengambil nilai dari form kita dapat menggunakan getter. yang mereturn value dari element tersebut. Contoh:

get value() {
  return this.querySelector(#searchElement).value
}

